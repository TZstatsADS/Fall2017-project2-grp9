shiny::runApp()
runApp()
install.packages("plotly")
library(plotly)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
data.path <- "../data/CollegeScorecard_Raw_Data/"
fulldata <- read.csv(paste(data.path, "5_Year_Data.csv", sep = ""), header = T, stringsAsFactors = FALSE)
#Reads file with fields that are relevant
fields <- read.csv(paste(data.path, "SelectedFields.csv", sep = ""))
#Remove any blank rows
columns <- as.character(fields[,2])
columns <- columns[!columns == ""]
#Reads the entire dataset
original.data <- read.csv(paste(data.path, "MERGED2014_15_PP.csv", sep = ""), header = T, stringsAsFactors = FALSE)
names(original.data)[1] <- "UNITID"
#Filters data
work.data <- subset(original.data, select = columns)
names(work.data)[37:74] <- c("Agriculture, Agriculture Operations, and Related Sciences",
"Natural Resources and Conservation",
"Architecture and Related Services",
"Area, Ethnic, Cultural, Gender, and Group Studies",
"Communication, Journalism, and Related Programs",
"Communications Technologies/Technicians and Support Services",
"Computer and Information Sciences and Support Services",
"Personal and Culinary Services",
"Education",
"Engineering",
"Engineering Technologies and Engineering-Related Fields",
"Foreign Languages, Literatures, and Linguistics",
"Family and Consumer Sciences/Human Sciences",
"Legal Professions and Studies",
"English Language and Literature/Letters",
"Liberal Arts and Sciences, General Studies and Humanities",
"Library Science",
"Biological and Biomedical Sciences",
"Mathematics and Statistics",
"Military Technologies and Applied Sciences",
"Multi/Interdisciplinary Studies",
"Parks, Recreation, Leisure, and Fitness Studies",
"Philosophy and Religious Studies",
"Theology and Religious Vocations",
"Physical Sciences",
"Science Technologies/Technicians",
"Psychology",
"Homeland Security, Law Enforcement, Firefighting and Related Protective Services",
"Public Administration and Social Service Professions",
"Social Sciences",
"Construction Trades",
"Mechanic and Repair Technologies/Technicians",
"Precision Production",
"Transportation and Materials Moving",
"Visual and Performing Arts",
"Health Professions and Related Programs",
"Business, Management, Marketing, and Related Support Services",
"History")
#Merge with Forbes Rank
data.path <- "../data/"
forbes.rank <- read.csv(paste(data.path, "ForbesRank.csv", sep = ""))
work.data <- merge(x = work.data, y = forbes.rank[,1:2], by.x = "INSTNM", by.y = "Name",
all.x = T, all.y = F)
for (i in 1:nrow(work.data)) {
if (work.data$LOCALE[i]==11 | work.data$LOCALE[i]== 12 | work.data$LOCALE[i]==13) {
work.data$LOCALE[i]<-"City"
}
else if (work.data$LOCALE[i]==21 | work.data$LOCALE[i]== 22 | work.data$LOCALE[i]==23) {
work.data$LOCALE[i]<- "Suburb"
}
else if (work.data$LOCALE[i]==31 | work.data$LOCALE[i]== 32 | work.data$LOCALE[i]==33) {
work.data$LOCALE[i]<- "Town"
}
else if (work.data$LOCALE[i]==41 | work.data$LOCALE[i]== 42 | work.data$LOCALE[i]==43){
work.data$LOCALE[i]<- "Rural"
}
}
for (j in 37:74){
for (i in 1:nrow(work.data)){
if (work.data[i,j] == 0){
work.data[i,j] = 0
}
else if (work.data[i,j] == "NULL"){
work.data[i,j] = "NULL"
}
else work.data[i,j] = 1
}
}
work.data$HIGHDEG[work.data$HIGHDEG == "0"] = "Non-degree-granting"
work.data$HIGHDEG[work.data$HIGHDEG == "1"] = "Certificate"
work.data$HIGHDEG[work.data$HIGHDEG == "2"] = "Associate"
work.data$HIGHDEG[work.data$HIGHDEG == "3"] = "Bachelor"
work.data$HIGHDEG[work.data$HIGHDEG == "4"] = "Graduate"
work.data$CONTROL[work.data$CONTROL == "1"] = "Public"
work.data$CONTROL[work.data$CONTROL == "2"] = "Private nonprofit"
work.data$CONTROL[work.data$CONTROL == "3"] = "Private for-profit"
#Writes a csv file with the selected data
write.csv(work.data, file = "../output/workdata.csv", row.names = F)
save(work.data, file = "../output/workdata.Rdata")
runApp()
runApp()
runApp()
runApp()
install.packages("ggplot2")
install.packages("ggplot2")
shiny::runApp()
runApp()
fulldata$INSTNM[1]
edu = filter(fulldata, INSTNM == "Alabama A & M University")
edu
edu$ADM_RATE
edu$Year
ggplot(data = edu,aes(x=ADM_RATE, y=YEAR))
runApp()
runApp()
runApp()
edu$ADM_RATE = as.numeric(as.character(edu$ADM_RATE))
edu$Year = as.numeric(edu$Year)
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE))
p
View(edu)
library(ggplot2)
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE))
p
edu$Year
edu$ADM_RATE
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE)) + geom_point()
p
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE)) + geom_point() +
ggtitle("Density of Admission Rate with Histogram overlay")
p
p + geom_smooth(method=lm)
p + geom_smooth(method=lm, color = "black")
runApp()
runApp()
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE))
+ geom_point()
+ geom_smooth(method = lm, color = "black")
+ ggtitle("5 Years Admission Rate with Trending")
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE)) + geom_point() + geom_smooth(method = lm, color = "black") + ggtitle("5 Years Admission Rate with Trending")
p
runApp()
runApp()
ggplotly(p)
runApp()
ggplot(p)
p
runApp()
runApp()
p
ggplotly(p)
install.packages("lattice")
library(lattice)
ggplotly(p)
runApp()
runApp()
runApp()
devtools::install_github("hadley/plotly")
devtools::install_github("hadley/ggplot2")
runApp()
runApp()
packageVersion("ggplot2")
ggplotly
ggplotly(p)
ggplot(p)
p
shiny::runApp()
data.path <- "../data/CollegeScorecard_Raw_Data/"
fulldata <- read.csv(paste(data.path, "5_Year_Data.csv", sep = ""), header = T, stringsAsFactors = FALSE)
#Reads file with fields that are relevant
fields <- read.csv(paste(data.path, "SelectedFields.csv", sep = ""))
#Remove any blank rows
columns <- as.character(fields[,2])
columns <- columns[!columns == ""]
#Reads the entire dataset
original.data <- read.csv(paste(data.path, "MERGED2014_15_PP.csv", sep = ""), header = T, stringsAsFactors = FALSE)
names(original.data)[1] <- "UNITID"
#Filters data
work.data <- subset(original.data, select = columns)
names(work.data)[37:74] <- c("Agriculture, Agriculture Operations, and Related Sciences",
"Natural Resources and Conservation",
"Architecture and Related Services",
"Area, Ethnic, Cultural, Gender, and Group Studies",
"Communication, Journalism, and Related Programs",
"Communications Technologies/Technicians and Support Services",
"Computer and Information Sciences and Support Services",
"Personal and Culinary Services",
"Education",
"Engineering",
"Engineering Technologies and Engineering-Related Fields",
"Foreign Languages, Literatures, and Linguistics",
"Family and Consumer Sciences/Human Sciences",
"Legal Professions and Studies",
"English Language and Literature/Letters",
"Liberal Arts and Sciences, General Studies and Humanities",
"Library Science",
"Biological and Biomedical Sciences",
"Mathematics and Statistics",
"Military Technologies and Applied Sciences",
"Multi/Interdisciplinary Studies",
"Parks, Recreation, Leisure, and Fitness Studies",
"Philosophy and Religious Studies",
"Theology and Religious Vocations",
"Physical Sciences",
"Science Technologies/Technicians",
"Psychology",
"Homeland Security, Law Enforcement, Firefighting and Related Protective Services",
"Public Administration and Social Service Professions",
"Social Sciences",
"Construction Trades",
"Mechanic and Repair Technologies/Technicians",
"Precision Production",
"Transportation and Materials Moving",
"Visual and Performing Arts",
"Health Professions and Related Programs",
"Business, Management, Marketing, and Related Support Services",
"History")
#Merge with Forbes Rank
data.path <- "../data/"
forbes.rank <- read.csv(paste(data.path, "ForbesRank.csv", sep = ""))
work.data <- merge(x = work.data, y = forbes.rank[,1:2], by.x = "INSTNM", by.y = "Name",
all.x = T, all.y = F)
for (i in 1:nrow(work.data)) {
if (work.data$LOCALE[i]==11 | work.data$LOCALE[i]== 12 | work.data$LOCALE[i]==13) {
work.data$LOCALE[i]<-"City"
}
else if (work.data$LOCALE[i]==21 | work.data$LOCALE[i]== 22 | work.data$LOCALE[i]==23) {
work.data$LOCALE[i]<- "Suburb"
}
else if (work.data$LOCALE[i]==31 | work.data$LOCALE[i]== 32 | work.data$LOCALE[i]==33) {
work.data$LOCALE[i]<- "Town"
}
else if (work.data$LOCALE[i]==41 | work.data$LOCALE[i]== 42 | work.data$LOCALE[i]==43){
work.data$LOCALE[i]<- "Rural"
}
}
for (j in 37:74){
for (i in 1:nrow(work.data)){
if (work.data[i,j] == 0){
work.data[i,j] = 0
}
else if (work.data[i,j] == "NULL"){
work.data[i,j] = "NULL"
}
else work.data[i,j] = 1
}
}
work.data$HIGHDEG[work.data$HIGHDEG == "0"] = "Non-degree-granting"
work.data$HIGHDEG[work.data$HIGHDEG == "1"] = "Certificate"
work.data$HIGHDEG[work.data$HIGHDEG == "2"] = "Associate"
work.data$HIGHDEG[work.data$HIGHDEG == "3"] = "Bachelor"
work.data$HIGHDEG[work.data$HIGHDEG == "4"] = "Graduate"
work.data$CONTROL[work.data$CONTROL == "1"] = "Public"
work.data$CONTROL[work.data$CONTROL == "2"] = "Private nonprofit"
work.data$CONTROL[work.data$CONTROL == "3"] = "Private for-profit"
#Writes a csv file with the selected data
write.csv(work.data, file = "../output/workdata.csv", row.names = F)
save(work.data, file = "../output/workdata.Rdata")
runApp()
runApp()
work.data$INSTNM[1]
edu <- filter(fulldata, INSTNM == "A & W Healthcare Educators")
edu$ADM_RATE = as.numeric(as.character(edu$ADM_RATE))
edu$Year = as.numeric(edu$Year)
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE)) + geom_point() + geom_smooth(method = lm, color = "black") + ggtitle("5 Years Admission Rate with Trending")
p
work.data$INSTNM[100]
edu <- filter(fulldata, INSTNM == "Alabama A & M University")
edu$ADM_RATE = as.numeric(as.character(edu$ADM_RATE))
edu$Year = as.numeric(edu$Year)
p <- ggplot(data = edu,aes(x=Year, y=ADM_RATE)) + geom_point() + geom_smooth(method = lm, color = "black") + ggtitle("5 Years Admission Rate with Trending")
p
ggplotly(p)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
edu$MD_EARN_WNE_P6
runApp()
runApp()
runApp()
edu$UGDS_WOMEN
edu$FEMALE
edu$UG
edu$UGDS
### Select used columes
Columes.Need=c("Year", "UNITID", "INSTNM", "CITY", "STABBR", "ZIP", "ACCREDAGENCY",
"INSTURL", "NPCURL", "SCH_DEG", "HIGHDEG", "CONTROL", "LOCALE", "LATITUDE",
"LONGITUDE", "ADM_RATE", "SATVR25", "SATVR75", "SATMT25", "SATMT75",
"SATWR25", "SATWR75", "SATVRMID", "SATMTMID", "SATWRMID", "ACTCM25",
"ACTCM75", "ACTEN25", "ACTEN75", "ACTMT25", "ACTMT75", "ACTWR25",
"ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID", "SAT_AVG",
"DISTANCEONLY", "UG", "CURROPER", "COSTT4_A", "TUITIONFEE_IN",
"TUITIONFEE_OUT", "PCTFLOAN", "UG25ABV", "INC_PCT_LO",  "DEBT_MDN",
"GRAD_DEBT_MDN", "WDRAW_DEBT_MDN", "REPAY_DT_MDN", "REPAY_DT_N",
"COUNT_ED", "AGE_ENTRY", "FEMALE", "MARRIED", "DEPENDENT", "VETERAN",
"COUNT_NWNE_P10", "COUNT_WNE_P10", "MN_EARN_WNE_P10", "MD_EARN_WNE_P10",
"PCT10_EARN_WNE_P10", "PCT25_EARN_WNE_P10", "PCT75_EARN_WNE_P10",
"PCT90_EARN_WNE_P10", "SD_EARN_WNE_P10", "COUNT_NWNE_P6", "COUNT_WNE_P6",
"MN_EARN_WNE_P6", "MD_EARN_WNE_P6", "PCT10_EARN_WNE_P6",
"PCT25_EARN_WNE_P6", "PCT75_EARN_WNE_P6", "PCT90_EARN_WNE_P6",
"SD_EARN_WNE_P6", "GRAD_DEBT_MDN10YR_SUPP", "UGDS_MEN", "UGDS_WOMEN", "UGDS")
#data1=read.csv("MERGED2014_15_PP.csv",header=T)
#data2=read.csv("MERGED2015_16_PP.csv",header=T)
library(data.table)
### read in data
data12=fread("data/MERGED2011_12_PP.csv")
data12=cbind(Year=2012,data12)
data13=fread("data/MERGED2012_13_PP.csv")
data13=cbind(Year=2013,data13)
data14=fread("data/MERGED2013_14_PP.csv")
data14=cbind(Year=2014,data14)
data15=fread("data/MERGED2014_15_PP.csv")
data15=cbind(Year=2015,data15)
data16=fread("data/MERGED2015_16_PP.csv")
data16=cbind(Year=2016,data16)
### universities intersection
Colleges.Need=unlist(Reduce(fintersect,
list(data12[,2],data13[,2],data14[,2],data15[,2],data16[,2])))
data12=subset(data12,is.element(data12$UNITID,Colleges.Need))
data13=subset(data13,is.element(data13$UNITID,Colleges.Need))
data14=subset(data14,is.element(data14$UNITID,Colleges.Need))
data15=subset(data15,is.element(data15$UNITID,Colleges.Need))
data16=subset(data16,is.element(data16$UNITID,Colleges.Need))
### Select used columes
Columes.Need=c("Year", "UNITID", "INSTNM", "CITY", "STABBR", "ZIP", "ACCREDAGENCY",
"INSTURL", "NPCURL", "SCH_DEG", "HIGHDEG", "CONTROL", "LOCALE", "LATITUDE",
"LONGITUDE", "ADM_RATE", "SATVR25", "SATVR75", "SATMT25", "SATMT75",
"SATWR25", "SATWR75", "SATVRMID", "SATMTMID", "SATWRMID", "ACTCM25",
"ACTCM75", "ACTEN25", "ACTEN75", "ACTMT25", "ACTMT75", "ACTWR25",
"ACTWR75", "ACTCMMID", "ACTENMID", "ACTMTMID", "ACTWRMID", "SAT_AVG",
"DISTANCEONLY", "UG", "CURROPER", "COSTT4_A", "TUITIONFEE_IN",
"TUITIONFEE_OUT", "PCTFLOAN", "UG25ABV", "INC_PCT_LO",  "DEBT_MDN",
"GRAD_DEBT_MDN", "WDRAW_DEBT_MDN", "REPAY_DT_MDN", "REPAY_DT_N",
"COUNT_ED", "AGE_ENTRY", "FEMALE", "MARRIED", "DEPENDENT", "VETERAN",
"COUNT_NWNE_P10", "COUNT_WNE_P10", "MN_EARN_WNE_P10", "MD_EARN_WNE_P10",
"PCT10_EARN_WNE_P10", "PCT25_EARN_WNE_P10", "PCT75_EARN_WNE_P10",
"PCT90_EARN_WNE_P10", "SD_EARN_WNE_P10", "COUNT_NWNE_P6", "COUNT_WNE_P6",
"MN_EARN_WNE_P6", "MD_EARN_WNE_P6", "PCT10_EARN_WNE_P6",
"PCT25_EARN_WNE_P6", "PCT75_EARN_WNE_P6", "PCT90_EARN_WNE_P6",
"SD_EARN_WNE_P6", "GRAD_DEBT_MDN10YR_SUPP", "UGDS_MEN", "UGDS_WOMEN", "UGDS")
### Merge data and order by UNITID
Data=rbind(data12,data13,data14,data15,data16)
Data=Data[, Columes.Need, with=F]
Data=setorder(Data,UNITID)
### Create major list
Major=c('Agriculture, Agriculture Operations, and Related Sciences',
'Natural Resources and Conservation',
'Architecture and Related Services',
'Area, Ethnic, Cultural, Gender, and Group Studies',
'Communication, Journalism, and Related Programs',
'Communications Technologies/Technicians and Support Services',
'Computer and Information Sciences and Support Services',
'Personal and Culinary Services',
'Education',
'Engineering',
'Engineering Technologies and Engineering-Related Fields',
'Foreign Languages, Literatures, and Linguistics',
'Family and Consumer Sciences/Human Sciences',
'Legal Professions and Studies',
'English Language and Literature/Letters',
'Liberal Arts and Sciences, General Studies and Humanities',
'Library Science',
'Biological and Biomedical Sciences',
'Mathematics and Statistics',
'Military Technologies and Applied Sciences',
'Multi/Interdisciplinary Studies',
'Parks, Recreation, Leisure, and Fitness Studies',
'Philosophy and Religious Studies',
'Theology and Religious Vocations',
'Physical Sciences',
'Science Technologies/Technicians',
'Psychology',
'Homeland Security, Law Enforcement, Firefighting and Related Protective Services',
'Public Administration and Social Service Professions',
'Social Sciences',
'Construction Trades',
'Mechanic and Repair Technologies/Technicians',
'Precision Production',
'Transportation and Materials Moving',
'Visual and Performing Arts',
'Health Professions and Related Programs',
'Business, Management, Marketing, and Related Support Services',
'History')
runApp()
runApp()
shiny::runApp()
