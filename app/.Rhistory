shiny::runApp()
install.packages("leaflet")
runApp()
library(leaflet)
install.packages("leaflet")
library(leaflet)
runApp()
# Chunk 1
data.path <- "../data/CollegeScorecard_Raw_Data/"
#Reads file with fields that are relevant
fields <- read.csv(paste(data.path, "SelectedFields.csv", sep = ""))
#Remove any blank rows
columns <- as.character(fields[,2])
columns <- columns[!columns == ""]
#Reads the entire dataset
original.data <- read.csv(paste(data.path, "MERGED2014_15_PP.csv", sep = ""), header = T)
names(original.data)[1] <- "UNITID"
#Writes a csv file with the selected data
work.data <- subset(original.data, select = columns)
write.csv(work.data, file = "../output/WorkData.csv", row.names = F)
rm(list=ls())
# Chunk 1
data.path <- "../data/CollegeScorecard_Raw_Data/"
#Reads file with fields that are relevant
fields <- read.csv(paste(data.path, "SelectedFields.csv", sep = ""))
#Remove any blank rows
columns <- as.character(fields[,2])
columns <- columns[!columns == ""]
#Reads the entire dataset
original.data <- read.csv(paste(data.path, "MERGED2014_15_PP.csv", sep = ""), header = T)
names(original.data)[1] <- "UNITID"
#Writes a csv file with the selected data
work.data <- subset(original.data, select = columns)
write.csv(work.data, file = "../output/WorkData.csv", row.names = F)
save(work.data, file = "../output/WorkData.Rdata")
rm(list=ls())
load("../output/WorkData.RData")
library(shiny)
library(leaflet)
View(work.data)
unique(work.data$STABBR)
unique(as.character(work.data$STABBR))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Chunk 1
data.path <- "../data/CollegeScorecard_Raw_Data/"
#Reads file with fields that are relevant
fields <- read.csv(paste(data.path, "SelectedFields.csv", sep = ""))
#Remove any blank rows
columns <- as.character(fields[,2])
columns <- columns[!columns == ""]
#Reads the entire dataset
original.data <- read.csv(paste(data.path, "MERGED2014_15_PP.csv", sep = ""), header = T)
names(original.data)[1] <- "UNITID"
#Writes a csv file with the selected data
work.data <- subset(original.data, select = columns)
write.csv(work.data, file = "../output/WorkData.csv", row.names = F)
save(work.data, file = "../output/WorkData.Rdata")
runApp()
